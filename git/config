# -*- conf -*-

[core]
whitespace = fix,-indent-with-non-tab,trailing-space,cr-at-eol
#pager = less -+F

[alias]
st = status -sb
##
ci = commit
amend= commit -a --amend
##
co = checkout
##
cl = clone --recurse-submodules
##
br = branch
brl = branch -v -a
##
rb = rebase
##
ps = push
pl = pull --recurse-submodules
up = !git pull --rebase --prune $@ && git submodule update --init --recursive --remote
ups = !find -maxdepth 2 -type d -name '.git' | xargs -P10 -I{} git -C {}/.. up
##
df = diff
dc = diff --cached
changes = diff --stat -r
##
re = rebase
rei = rebase --interactive
##
undo = reset HEAD~1 --mixed
#
l = log --decorate --pretty=format:'\n~~~ %C(yellow)commit %H%Creset %C(magenta)%d%Creset\nAuthor: %C(cyan)%aN <%ae>%Creset\nDate: %Cgreen%cd\n\n%Creset %s'
lg = log --graph --pretty=format:'%C(red reverse)%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
ll = log --graph --pretty=format:'%C(red reverse)%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative --decorate --numstat
lp = log -p
lme = "!f() { git log --author=\"$(git config --get user.name)\" \"$@\"; }; f"

who = shortlog -s --
new = !sh -c 'git log $1@{1}..$1@{0} "$@"'
lcount = shortlog -sn
#
patch-out = format-patch --stdout
patch-in = apply

# git-flow plugin required
flow-startnpublish = "!f() { typ=$1; br=$2; bs=$3; shift; git flow $typ start $br $bs && git br && git flow $typ publish $b || { printf \" ERROR PUBLISHING '$br'\\n When fixed run:  git flow $typ publish $br\\n\";exit 1;};}; f"
fstart = "!f() { b=$1; echo $@; shift; git flow feature start \"$b\" ${2} && git br && git flow feature publish \"$b\" || { printf \" ERROR PUBLISHING '$b'\\n When fixed run:  git flow feature publish '$b'\\n\";exit 1;};}; f"
fco = flow feature checkout
fpl = flow feature pull
fps = flow feature push
frb = flow feature rebase
hstart = "!f() { b=$1; shift; git flow hotfix start \"$b\" ${2} && git br && git flow hotfix publish \"$b\" || { printf \" ERROR PUBLISHING '$b'\\n When fixed run:  git flow hotfix publish '$b'\\n\";exit 1;};}; f"
hco = flow hotfix checkout
hpl = flow hotfix pull
hps = flow hotfix push
hrb = flow hotfix rebase

hchanges = "!f() { b=$1; shift; git log $@ master..${b};}; f"
fchanges = "!f() { b=$1; shift; git log $@ develop..${b};}; f"

# git-gitlab plugin required. To install: gem install git-gitlab
gl-req = "!f(){ b=$(git rev-parse --abbrev-ref HEAD); git gitlab merge $b develop --assign \"$@\"; }; f"
gl-feature-merge = gitlab merge SOURCE_BRANCH TARGET_BRANCH --assign USER_NAME
gl-hotfix-merge = gitlab merge SOURCE_BRANCH TARGET_BRANCH --assign USER_NAME
gl-ls = gitlab merge --list
gl-set-project = git config gitlab.project


[color]
ui = always

[color "branch"]
current = yellow reverse
local = yellow
remote = green

[color "diff"]
meta = yellow bold
frag = magenta bold
old = red bold
new = green bold

[color "status"]
added = yellow
changed = green
untracked = cyan

[filter "encrypt"]
clean = gpg -q --batch --no-tty -e -r ferk
smudge = gpg -q --batch --no-tty -d

[diff "gpg"]
textconv = gpg -q --batch --no-tty -d

[push]
default = simple

[credential]
helper = cache --timeout=28800


##########################################

# For machine/user specific settings you might want to use ~/.gitconfig
# the settings in there will take precedence over the ones in this file.
# For example, you might want to use that for defining your user:
#
#  [user]
#  email = <YOUR EMAIL>
#  name = <YOUR NAME>

##########################################

# git merge -s ours --no-commit packages/master
# git read-tree -prefix="" -u packages/master

# git filter-branch --env-filter '
# OLD_EMAIL="old@mail.con"
# CORRECT_NAME="Name"
# CORRECT_EMAIL="new@mail.com"
# 
# if [ "$GIT_COMMITTER_EMAIL" = "$OLD_EMAIL" ]
# then
#     export GIT_COMMITTER_NAME="$CORRECT_NAME"
#     export GIT_COMMITTER_EMAIL="$CORRECT_EMAIL"
# fi
# if [ "$GIT_AUTHOR_EMAIL" = "$OLD_EMAIL" ]
# then
#     export GIT_AUTHOR_NAME="$CORRECT_NAME"
#     export GIT_AUTHOR_EMAIL="$CORRECT_EMAIL"
# fi
# ' --tag-name-filter cat -- --branches --tags
